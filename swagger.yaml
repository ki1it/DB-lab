swagger: "2.0"
info:
  description: "This is a sample telegram alerter."
  version: "1.0.0"
  title: "TG alerter"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "users"
  description: "Work with users"
- name: "groups"
  description: "Work with groups"
- name: "alert"
  description: "Send message"
schemes:
- "https"
- "http"
paths:
  /api/users:
    post:
      tags:
      - "users"
      summary: "Add a new user"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "OK"
    get:
      tags:
      - "users"
      summary: "Get all users"
      operationId: "getAllUsers"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Invalid status value"      
  /api/users/{userId}:
    delete:
      tags:
      - "users"
      summary: "Deletes a user"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
    get:
      tags:
      - "users"
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
  /api/groups:
    post:
      tags:
      - "groups"
      summary: "Add a new group"
      description: ""
      operationId: "addGroup"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Group object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Group"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "OK"
    get:
      tags:
      - "groups"
      summary: "Get all groups"
      operationId: "getAllGroups"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
        400:
          description: "Invalid status value"      
  /api/groups/{groupId}:
    delete:
      tags:
      - "groups"
      summary: "Deletes a group"
      description: ""
      operationId: "deleteGroup"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "groupId"
        in: "path"
        description: "Group id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Group not found"
    get:
      tags:
      - "groups"
      summary: "Find user by ID"
      description: "Returns a single group"
      operationId: "getGroupById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "groupId"
        in: "path"
        description: "ID of group to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Group"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Group not found"       
  /api/groups/useradd:
    post:
      tags:
      - "groups"
      summary: "Add user to group"
      description: ""
      operationId: "addUserToGroup"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Oobject that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/UserToGroup"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "OK"
  /api/groups/userdel:
    post:
      tags:
      - "groups"
      summary: "Delete user to group relation"
      description: ""
      operationId: "deleteUserToGroup"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Oobject that needs to be deleted"
        required: true
        schema:
          $ref: "#/definitions/UserToGroup"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "OK"  
  /alert:
     post:
      tags:
      - "alert"
      summary: "Send message to user or group"
      description: ""
      operationId: "sendMessage"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Oobject that needs to be deleted"
        required: true
        schema:
          $ref: "#/definitions/SendMessage"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "OK"  
definitions:
  User:
    type: "object"
    properties:
      userChatId:
        type: "integer"
        format: "int64"
      userName:
        type: "string"
    xml:
      name: "User"
  Group:
    type: "object"
    properties:
      groupName:
        type: "string"
      users:
        type: "array"
        xml:
          name: "user"
          wrapped: true
        items:
          $ref: "#/definitions/User"
    xml:
      name: "User"    
  UserToGroup:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
      groupId:
        type: "integer"
        format: "int64"
    xml:
      name: "UserToGroup"
  SendMessage:
    type: "object"
    properties:
      sendToGroup:
        type: "integer"
        description: "send to group:1; send to user:0"
        enum:
        - "0"
        - "1"
      groupID:
        type: "integer"
        format: "int64"
      userID:  
        type: "integer"
        format: "int64"
      theme:
        type: "string" 
      message:
        type: "string"   
    xml:
      name: "SendMessage"    